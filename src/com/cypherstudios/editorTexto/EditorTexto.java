package com.cypherstudios.editorTexto;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;

public class EditorTexto extends javax.swing.JFrame {

    //Creamos un atributo que representa al fichero, para trabajar con el como archivo
    private File ficheroActual;

    public EditorTexto() {
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtareaContenedor = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        miNuevo = new javax.swing.JMenuItem();
        miAbrir = new javax.swing.JMenuItem();
        miGuardar = new javax.swing.JMenuItem();
        miGuardarComo = new javax.swing.JMenuItem();
        miSalir = new javax.swing.JMenuItem();
        menuEditar = new javax.swing.JMenu();
        miCortar = new javax.swing.JMenuItem();
        miCopiar = new javax.swing.JMenuItem();
        miPegar = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor de Texto");

        txtareaContenedor.setColumns(20);
        txtareaContenedor.setRows(5);
        jScrollPane1.setViewportView(txtareaContenedor);

        menuArchivo.setText("Archivo");

        miNuevo.setText("Nuevo");
        miNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(miNuevo);

        miAbrir.setText("Abrir...");
        miAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(miAbrir);

        miGuardar.setText("Guardar");
        miGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(miGuardar);

        miGuardarComo.setText("Guardar como...");
        miGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miGuardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(miGuardarComo);

        miSalir.setText("Salir");
        miSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSalirActionPerformed(evt);
            }
        });
        menuArchivo.add(miSalir);

        jMenuBar1.add(menuArchivo);

        menuEditar.setText("Editar");

        miCortar.setText("Cortar");
        miCortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCortarActionPerformed(evt);
            }
        });
        menuEditar.add(miCortar);

        miCopiar.setText("Copiar");
        miCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCopiarActionPerformed(evt);
            }
        });
        menuEditar.add(miCopiar);

        miPegar.setText("Pegar");
        miPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miPegarActionPerformed(evt);
            }
        });
        menuEditar.add(miPegar);

        jMenuBar1.add(menuEditar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Limpia el text area y establece el atributo "fichero" como null
     *
     * @param evt
     */
    private void miNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNuevoActionPerformed

        this.txtareaContenedor.setText("");
        this.ficheroActual = null;

    }//GEN-LAST:event_miNuevoActionPerformed

    /**
     *
     * @param evt
     */
    private void miAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAbrirActionPerformed

        JFileChooser fc = new JFileChooser();

        //Para que no se pueda elegir más de un fichero
        fc.setMultiSelectionEnabled(false);
        //Solo queremos ficheros
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int seleccion = fc.showOpenDialog(this.getContentPane());

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            this.ficheroActual = fc.getSelectedFile();

            try (FileReader fr = new FileReader(this.ficheroActual)) {
                //Creamos un string vacio
                String cadena = "";

                //Lee el fichero seleccionado
                int valor = fr.read();

                while (valor != -1) {
                    cadena += (char) valor;
                    valor = fr.read();
                }
                this.txtareaContenedor.setText(cadena);

            } catch (FileNotFoundException ex) {
                System.out.println(ex.getMessage());
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }

        }

    }//GEN-LAST:event_miAbrirActionPerformed

    private void miGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miGuardarActionPerformed

        if (this.ficheroActual == null) {
            this.dialogoGuardar();

        } else {
            this.escribirFichero();
        }


    }//GEN-LAST:event_miGuardarActionPerformed

    private void miGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miGuardarComoActionPerformed
        this.dialogoGuardar();

    }//GEN-LAST:event_miGuardarComoActionPerformed

    private void miCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCopiarActionPerformed
        txtareaContenedor.copy();
    }//GEN-LAST:event_miCopiarActionPerformed

    private void miCortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCortarActionPerformed
        txtareaContenedor.cut();
    }//GEN-LAST:event_miCortarActionPerformed

    private void miPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miPegarActionPerformed
        txtareaContenedor.paste();
    }//GEN-LAST:event_miPegarActionPerformed

    private void miSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSalirActionPerformed
        //Sale de la ventana donde se encuentre
        //dispose();

        //Cierra la aplicación
        System.exit(0);
    }//GEN-LAST:event_miSalirActionPerformed

    //
    private void dialogoGuardar() {
        JFileChooser fc = new JFileChooser();

        fc.setMultiSelectionEnabled(false);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int seleccion = fc.showSaveDialog(this.getContentPane());

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            this.ficheroActual = fc.getSelectedFile();

            this.escribirFichero();

        }
    }

//Método para escribir el fichero
    private void escribirFichero() {

        try (FileWriter fw = new FileWriter(this.ficheroActual)) {

            fw.write((this.txtareaContenedor.getText()));
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorTexto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEditar;
    private javax.swing.JMenuItem miAbrir;
    private javax.swing.JMenuItem miCopiar;
    private javax.swing.JMenuItem miCortar;
    private javax.swing.JMenuItem miGuardar;
    private javax.swing.JMenuItem miGuardarComo;
    private javax.swing.JMenuItem miNuevo;
    private javax.swing.JMenuItem miPegar;
    private javax.swing.JMenuItem miSalir;
    private javax.swing.JTextArea txtareaContenedor;
    // End of variables declaration//GEN-END:variables
}
